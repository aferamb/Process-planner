
Starting program: C:\Users\ALEJANDRO\Desktop\Tareas\Uni\2 Curso\Cuatri 1\Estructuras_de_datos\Lab\PL1_ESTRUCTURA_DE_DATOS\Planificador de procesos\Main_2_test_debug.exe 
[New Thread 6068.0x28dc]
[New Thread 6068.0x4acc]
[New Thread 6068.0x46a8]

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=0) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
304	        Nucleo nucleoaux = nodo->nucleo;
305	        return nucleoaux;
306	    } else {
nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
nodo = 0x6e4230
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ff990) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ff970) at Proceso.cpp:35
35	  return PID;
36	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=0) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
305	        return nucleoaux;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
306	    } else {
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:310
310	}
Nucleo::get_tiempo_fin (this=0x5ff9e0) at Nucleo.cpp:128
128	    return tiempo_fin;
129	}
Nucleo::~Nucleo (this=0x5ff9e0, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffa00, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff9e4, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Proceso::~Proceso (this=0x5ff970, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ff990, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff9b0, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff994, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:188
188	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:189
189	                        cout << "6" << i << endl;
190	                        if (lista.coger(i).get_proceso().get_PID() != -1 && lista.coger(i).get_tiempo_fin() == Global::tiempoTranscurrido){ // aqui falla la ejecucion, PROBLEMAS creo en coger()

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=1) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
306	    } else {
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ff990) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ff970) at Proceso.cpp:35
35	  return PID;
36	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=1) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
305	        return nucleoaux;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
306	    } else {
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:310
310	}
Nucleo::get_tiempo_fin (this=0x5ff9e0) at Nucleo.cpp:128
128	    return tiempo_fin;
129	}
Nucleo::~Nucleo (this=0x5ff9e0, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffa00, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff9e4, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Proceso::~Proceso (this=0x5ff970, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ff990, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff9b0, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff994, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:188
188	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:189
189	                        cout << "6" << i << endl;
190	                        if (lista.coger(i).get_proceso().get_PID() != -1 && lista.coger(i).get_tiempo_fin() == Global::tiempoTranscurrido){ // aqui falla la ejecucion, PROBLEMAS creo en coger()

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=2) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=2) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=2) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 4, proceso_en_ejecucion = {PID = -1, PPID = -1, inicio = -1, tiempoDeVida = -1, prioridad = -1, nucleoAsignado = -1}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = -1, tiempo_fin = -1}
306	    } else {
1: nucleoaux = {id = 4, proceso_en_ejecucion = {PID = -1, PPID = -1, inicio = -1, tiempoDeVida = -1, prioridad = -1, nucleoAsignado = -1}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = -1, tiempo_fin = -1}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=2) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ff990) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ff970) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::~Proceso (this=0x5ff970, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ff990, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff9b0, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff994, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:188
188	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:197
197	                    cout << endl;
198	                    cout << "Inicio de eliminacion de nucleos vacios y sin carga." << endl;
199	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:200
200	                        cout << "8" << i << endl;
201	                        if (lista.get_longitud() > 1 && lista.coger(i).get_proceso().get_PID() == -1 && lista.coger(i).get_cola_procesos().es_vacia()){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=0) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
306	    } else {
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ffa50) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ffa30) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::~Proceso (this=0x5ffa30, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ffa50, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffa70, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ffa54, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:199
199	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:200
200	                        cout << "8" << i << endl;
201	                        if (lista.get_longitud() > 1 && lista.coger(i).get_proceso().get_PID() == -1 && lista.coger(i).get_cola_procesos().es_vacia()){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=1) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
306	    } else {
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ffa50) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ffa30) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::~Proceso (this=0x5ffa30, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ffa50, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffa70, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ffa54, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:199
199	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:200
200	                        cout << "8" << i << endl;
201	                        if (lista.get_longitud() > 1 && lista.coger(i).get_proceso().get_PID() == -1 && lista.coger(i).get_cola_procesos().es_vacia()){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=2) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=2) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
No symbol "nodo" in current context.
No symbol "nodo" in current context.
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
actual = 0x6ed980
[New Thread 6068.0x2980]
324	}
Lista::coger (this=0x5ff5a0, n=2) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 4, proceso_en_ejecucion = {PID = -1, PPID = -1, inicio = -1, tiempoDeVida = -1, prioridad = -1, nucleoAsignado = -1}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = -1, tiempo_fin = -1}
306	    } else {
1: nucleoaux = {id = 4, proceso_en_ejecucion = {PID = -1, PPID = -1, inicio = -1, tiempoDeVida = -1, prioridad = -1, nucleoAsignado = -1}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = -1, tiempo_fin = -1}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=2) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ffa50) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ffa30) at Proceso.cpp:35
35	  return PID;
36	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=2) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=2) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=2) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = 4, proceso_en_ejecucion = {PID = -1, PPID = -1, inicio = -1, tiempoDeVida = -1, prioridad = -1, nucleoAsignado = -1}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = -1, tiempo_fin = -1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = 4, proceso_en_ejecucion = {PID = -1, PPID = -1, inicio = -1, tiempoDeVida = -1, prioridad = -1, nucleoAsignado = -1}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = -1, tiempo_fin = -1}
305	        return nucleoaux;
1: nucleoaux = {id = 4, proceso_en_ejecucion = {PID = -1, PPID = -1, inicio = -1, tiempoDeVida = -1, prioridad = -1, nucleoAsignado = -1}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = -1, tiempo_fin = -1}
306	    } else {
1: nucleoaux = {id = 4, proceso_en_ejecucion = {PID = -1, PPID = -1, inicio = -1, tiempoDeVida = -1, prioridad = -1, nucleoAsignado = -1}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = -1, tiempo_fin = -1}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=2) at Lista.cpp:310
310	}
Nucleo::get_cola_procesos (this=0x5ffac0) at Nucleo.cpp:155
155	    if (cola_procesos.es_vacia()){
Cola::es_vacia (this=0x5ffae0) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Nucleo::get_cola_procesos (this=0x5ffac0) at Nucleo.cpp:156
156	        cout << "Cola de procesos vacia" << endl;
157	        cout << endl;
158	        return cola_procesos;
162	}
Cola::es_vacia (this=0x5ffaa0) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::~Cola (this=0x5ffaa0, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Nucleo::~Nucleo (this=0x5ffac0, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffae0, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ffac4, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Proceso::~Proceso (this=0x5ffa30, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ffa50, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffa70, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ffa54, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:202
202	                            cout << "9" << endl;
203	                            lista.eliminar(i);
Lista::eliminar (this=0x5ff5a0, posicion=2) at Lista.cpp:154
154	    if (posicion < 0 || posicion >= longitud) {
160	    if (posicion == 0) {
166	    } else if (posicion == longitud - 1) { // esto esta para que si se elimina el ultimo nodo, no de  SIGSEGV, Segmentation fault al intentar acceder a un puntero nulo
167	        nodoAEliminar = ultimo;
168	        ultimo = ultimo->anterior;
169	        if (ultimo != nullptr) {
170	            ultimo->siguiente = nullptr; // he añadido que actualice el puntero siguiente del ultimo nodo, para que no sae null
180	    delete nodoAEliminar;
NodoLista::~NodoLista (this=0x6ed980, __in_chrg=<optimized out>) at NodoLista.cpp:36
36	}
Nucleo::~Nucleo (this=0x6ed980, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x6ed9a0, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x6ed984, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::eliminar (this=0x5ff5a0, posicion=2) at Lista.cpp:181
181	    longitud--;
182	}
main () at main2_test.cpp:199
199	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:207
207	                    if(!pila.esVacia()){ // Al final, insertar los procesos de la pila que se inician en el tiempo actual
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
main () at main2_test.cpp:208
208	                        Proceso p = pila.mostrar();
Pila::mostrar (this=0x5ff5e0) at Pila.cpp:66
66	    if (esVacia()) {
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
Pila::mostrar (this=0x5ff5e0) at Pila.cpp:71
71	        return cima->proceso;
73	}
main () at main2_test.cpp:209
209	                        cout << "Proceso en la cima de la pila: PID: " << p.get_PID() << ", PPID: " << p.get_PPID() << ", Inicio: " << p.get_inicio() << ", Tiempo de vida: " << p.get_tiempo_de_vida() << ", Prioridad: " << p.get_prioridad() << endl;
Proceso::get_PID (this=0x5ff300) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::get_PPID (this=0x5ff300) at Proceso.cpp:39
39	  return PPID;
40	}
Proceso::get_inicio (this=0x5ff300) at Proceso.cpp:43
43	  return inicio;
44	}
Proceso::get_tiempo_de_vida (this=0x5ff300) at Proceso.cpp:47
47	  return tiempoDeVida;
48	}
Proceso::get_prioridad (this=0x5ff300) at Proceso.cpp:51
51	  return prioridad;
52	}
main () at main2_test.cpp:210
210	                        cout << endl;
211	                        while(p.get_inicio() == Global::tiempoTranscurrido){
Proceso::get_inicio (this=0x5ff300) at Proceso.cpp:43
43	  return inicio;
44	}
main () at main2_test.cpp:220
220	                    }
Proceso::~Proceso (this=0x5ff300, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:222
222	                    cout << endl;
223	                    lista.mostrar_estado_nucleos();
Lista::mostrar_estado_nucleos (this=0x5ff5a0) at Lista.cpp:140
140	    NodoLista* actual = primero;
141	    int pos = 0;
142	    while (actual != nullptr) {
143	        cout << "Nucleo en posicion " << pos << ":" << endl;
144	        actual->nucleo.detalles_nucleo();
Nucleo::detalles_nucleo (this=0x6e4230) at Nucleo.cpp:241
241	    if (proceso_en_ejecucion.get_PID() == -1){
Proceso::get_PID (this=0x6e4234) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::detalles_nucleo (this=0x6e4230) at Nucleo.cpp:244
244	        detalles_proceso();
Nucleo::detalles_proceso (this=0x6e4230) at Nucleo.cpp:202
202	    if (proceso_en_ejecucion.get_PID() == -1){
Proceso::get_PID (this=0x6e4234) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::detalles_proceso (this=0x6e4230) at Nucleo.cpp:205
205	        cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Proceso en nucleo " << id << " PID: " << proceso_en_ejecucion.get_PID() << ", PPID: " << proceso_en_ejecucion.get_PPID() << ", Inicio: " << proceso_en_ejecucion.get_inicio() << ", Tiempo de vida: " << proceso_en_ejecucion.get_tiempo_de_vida() << ", Prioridad: " << proceso_en_ejecucion.get_prioridad() << endl;
Proceso::get_PID (this=0x6e4234) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::get_PPID (this=0x6e4234) at Proceso.cpp:39
39	  return PPID;
40	}
Proceso::get_inicio (this=0x6e4234) at Proceso.cpp:43
43	  return inicio;
44	}
Proceso::get_tiempo_de_vida (this=0x6e4234) at Proceso.cpp:47
47	  return tiempoDeVida;
48	}
Proceso::get_prioridad (this=0x6e4234) at Proceso.cpp:51
51	  return prioridad;
52	}
Nucleo::detalles_proceso (this=0x6e4230) at Nucleo.cpp:207
207	}
Nucleo::detalles_nucleo (this=0x6e4230) at Nucleo.cpp:246
246	    cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Tiempo de inicio ejecucion: " << tiempo_inicio << ", Tiempo de finalizacion: " << tiempo_fin << endl;
247	    cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Tiempo de ejecucion restante: " << tiempo_fin-Global::tiempoTranscurrido << " minutos" << endl;
248	    if (cola_procesos.es_vacia()){
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Nucleo::detalles_nucleo (this=0x6e4230) at Nucleo.cpp:249
249	        cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Cola de procesos vacia" << endl;
254	}
Lista::mostrar_estado_nucleos (this=0x5ff5a0) at Lista.cpp:145
145	        cout << endl;
146	        actual = actual->siguiente;
147	        pos++;
142	    while (actual != nullptr) {
143	        cout << "Nucleo en posicion " << pos << ":" << endl;
144	        actual->nucleo.detalles_nucleo();
Nucleo::detalles_nucleo (this=0x6ef8f0) at Nucleo.cpp:241
241	    if (proceso_en_ejecucion.get_PID() == -1){
Proceso::get_PID (this=0x6ef8f4) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::detalles_nucleo (this=0x6ef8f0) at Nucleo.cpp:244
244	        detalles_proceso();
Nucleo::detalles_proceso (this=0x6ef8f0) at Nucleo.cpp:202
202	    if (proceso_en_ejecucion.get_PID() == -1){
Proceso::get_PID (this=0x6ef8f4) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::detalles_proceso (this=0x6ef8f0) at Nucleo.cpp:205
205	        cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Proceso en nucleo " << id << " PID: " << proceso_en_ejecucion.get_PID() << ", PPID: " << proceso_en_ejecucion.get_PPID() << ", Inicio: " << proceso_en_ejecucion.get_inicio() << ", Tiempo de vida: " << proceso_en_ejecucion.get_tiempo_de_vida() << ", Prioridad: " << proceso_en_ejecucion.get_prioridad() << endl;
Proceso::get_PID (this=0x6ef8f4) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::get_PPID (this=0x6ef8f4) at Proceso.cpp:39
39	  return PPID;
40	}
Proceso::get_inicio (this=0x6ef8f4) at Proceso.cpp:43
43	  return inicio;
44	}
Proceso::get_tiempo_de_vida (this=0x6ef8f4) at Proceso.cpp:47
47	  return tiempoDeVida;
48	}
Proceso::get_prioridad (this=0x6ef8f4) at Proceso.cpp:51
51	  return prioridad;
52	}
Nucleo::detalles_proceso (this=0x6ef8f0) at Nucleo.cpp:207
207	}
Nucleo::detalles_nucleo (this=0x6ef8f0) at Nucleo.cpp:246
246	    cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Tiempo de inicio ejecucion: " << tiempo_inicio << ", Tiempo de finalizacion: " << tiempo_fin << endl;
247	    cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Tiempo de ejecucion restante: " << tiempo_fin-Global::tiempoTranscurrido << " minutos" << endl;
248	    if (cola_procesos.es_vacia()){
Cola::es_vacia (this=0x6ef910) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Nucleo::detalles_nucleo (this=0x6ef8f0) at Nucleo.cpp:249
249	        cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Cola de procesos vacia" << endl;
254	}
Lista::mostrar_estado_nucleos (this=0x5ff5a0) at Lista.cpp:145
145	        cout << endl;
146	        actual = actual->siguiente;
147	        pos++;
142	    while (actual != nullptr) {
149	}
main () at main2_test.cpp:224
224	                    cout << endl;
225	                    cout << endl;
148	                for(int i = Global::tiempoTranscurrido; Global::tiempoTranscurrido <= i+n; Global::tiempoTranscurrido++){
150	                    if (pila.esVacia() && lista.get_longitud() == 1 && lista.coger(0).get_proceso().get_PID() == -1 && lista.coger(0).get_cola_procesos().es_vacia()){
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
main () at main2_test.cpp:160
160	                    cout << endl;
161	                    cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
162	                    cout << "Tiempo actual: " << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << endl;
163	                    cout << endl;
166	                    if(!pila.esVacia() && Global::tiempoTranscurrido == 0){ 
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
main () at main2_test.cpp:186
186	                    cout << endl;
187	                    cout << "Inicio de eliminacion de procesos que han terminado." << endl;
188	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:189
189	                        cout << "6" << i << endl;
190	                        if (lista.coger(i).get_proceso().get_PID() != -1 && lista.coger(i).get_tiempo_fin() == Global::tiempoTranscurrido){ // aqui falla la ejecucion, PROBLEMAS creo en coger()

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=0) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 7272688}, tiempo_inicio = 0, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 7272688}, tiempo_inicio = 0, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
306	    } else {
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ff990) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ff970) at Proceso.cpp:35
35	  return PID;
36	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=0) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
305	        return nucleoaux;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
306	    } else {
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:310
310	}
Nucleo::get_tiempo_fin (this=0x5ff9e0) at Nucleo.cpp:128
128	    return tiempo_fin;
129	}
Nucleo::~Nucleo (this=0x5ff9e0, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffa00, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff9e4, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Proceso::~Proceso (this=0x5ff970, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ff990, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff9b0, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff994, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:188
188	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:189
189	                        cout << "6" << i << endl;
190	                        if (lista.coger(i).get_proceso().get_PID() != -1 && lista.coger(i).get_tiempo_fin() == Global::tiempoTranscurrido){ // aqui falla la ejecucion, PROBLEMAS creo en coger()

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=1) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
306	    } else {
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ff990) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ff970) at Proceso.cpp:35
35	  return PID;
36	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=1) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
305	        return nucleoaux;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
306	    } else {
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:310
310	}
Nucleo::get_tiempo_fin (this=0x5ff9e0) at Nucleo.cpp:128
128	    return tiempo_fin;
129	}
Nucleo::~Nucleo (this=0x5ff9e0, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffa00, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff9e4, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Proceso::~Proceso (this=0x5ff970, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ff990, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff9b0, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff994, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:188
188	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:197
197	                    cout << endl;
198	                    cout << "Inicio de eliminacion de nucleos vacios y sin carga." << endl;
199	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:200
200	                        cout << "8" << i << endl;
201	                        if (lista.get_longitud() > 1 && lista.coger(i).get_proceso().get_PID() == -1 && lista.coger(i).get_cola_procesos().es_vacia()){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=0) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
306	    } else {
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 4}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ffa50) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ffa30) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::~Proceso (this=0x5ffa30, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ffa50, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffa70, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ffa54, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:199
199	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:200
200	                        cout << "8" << i << endl;
201	                        if (lista.get_longitud() > 1 && lista.coger(i).get_proceso().get_PID() == -1 && lista.coger(i).get_cola_procesos().es_vacia()){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=1) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
321	        actual = actual->siguiente;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 6288000}, tiempo_inicio = 1, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
306	    } else {
1: nucleoaux = {id = 2, proceso_en_ejecucion = {PID = 2, PPID = 1, inicio = 0, tiempoDeVida = 5, prioridad = 1, nucleoAsignado = 2}, cola_procesos = {primero = 0x0, ultimo = 0x0, longitud = 0}, tiempo_inicio = 0, tiempo_fin = 5}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=1) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ffa50) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ffa30) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::~Proceso (this=0x5ffa30, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::~Nucleo (this=0x5ffa50, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ffa70, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ffa54, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:199
199	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:207
207	                    if(!pila.esVacia()){ // Al final, insertar los procesos de la pila que se inician en el tiempo actual
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
main () at main2_test.cpp:208
208	                        Proceso p = pila.mostrar();
Pila::mostrar (this=0x5ff5e0) at Pila.cpp:66
66	    if (esVacia()) {
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
Pila::mostrar (this=0x5ff5e0) at Pila.cpp:71
71	        return cima->proceso;
73	}
main () at main2_test.cpp:209
209	                        cout << "Proceso en la cima de la pila: PID: " << p.get_PID() << ", PPID: " << p.get_PPID() << ", Inicio: " << p.get_inicio() << ", Tiempo de vida: " << p.get_tiempo_de_vida() << ", Prioridad: " << p.get_prioridad() << endl;
Proceso::get_PID (this=0x5ff300) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::get_PPID (this=0x5ff300) at Proceso.cpp:39
39	  return PPID;
40	}
Proceso::get_inicio (this=0x5ff300) at Proceso.cpp:43
43	  return inicio;
44	}
Proceso::get_tiempo_de_vida (this=0x5ff300) at Proceso.cpp:47
47	  return tiempoDeVida;
48	}
Proceso::get_prioridad (this=0x5ff300) at Proceso.cpp:51
51	  return prioridad;
52	}
main () at main2_test.cpp:210
210	                        cout << endl;
211	                        while(p.get_inicio() == Global::tiempoTranscurrido){
Proceso::get_inicio (this=0x5ff300) at Proceso.cpp:43
43	  return inicio;
44	}
main () at main2_test.cpp:212
212	                            lista.insertar_proceso(p, lista.nucleo_menos_carga()); // terminar funcion de nucleo menos carga, para que añada un nucleo si es necesario
Lista::nucleo_menos_carga (this=0x5ff5a0, imprimir=false) at Lista.cpp:216
216	    if (es_vacia()) return -1;
Lista::es_vacia (this=0x5ff5a0) at Lista.cpp:58
58	    return (primero == nullptr);
59	}
Lista::nucleo_menos_carga (this=0x5ff5a0, imprimir=false) at Lista.cpp:218
218	    bool nuceloEncontrado = false;  
220	    int posicion = 0, posicionMenosCarga = 0;
221	    int pid = primero->nucleo.get_proceso().get_PID();
Nucleo::get_proceso (this=0x6e4230) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ff1c0) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::~Proceso (this=0x5ff1c0, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::nucleo_menos_carga (this=0x5ff5a0, imprimir=false) at Lista.cpp:222
222	    int menorCarga = primero->nucleo.get_cola_procesos().get_longitud();
Nucleo::get_cola_procesos (this=0x6e4230) at Nucleo.cpp:155
155	    if (cola_procesos.es_vacia()){
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Nucleo::get_cola_procesos (this=0x6e4230) at Nucleo.cpp:156
156	        cout << "Cola de procesos vacia" << endl;
157	        cout << endl;
158	        return cola_procesos;
162	}
Cola::get_longitud (this=0x5ff1e0) at Cola.cpp:134
134	    return longitud;
135	}
Cola::~Cola (this=0x5ff1e0, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Lista::nucleo_menos_carga (this=0x5ff5a0, imprimir=false) at Lista.cpp:223
223	    NodoLista* actualx = primero;
224	    NodoLista* actual = primero->siguiente;
226	    while (actualx != nullptr && !nuceloEncontrado && posicion < longitud) {
227	        if (pid == -1) {
233	            posicion++;
234	            actualx = actualx->siguiente; // si es el ultimo nodo, el siguiente es nullptr, y no se puede acceder a la propiedad nucleo
235	            if (actualx != nullptr && posicion < longitud){
236	                pid = actualx->nucleo.get_proceso().get_PID();
Nucleo::get_proceso (this=0x6ef8f0) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ff200) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::~Proceso (this=0x5ff200, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::nucleo_menos_carga (this=0x5ff5a0, imprimir=false) at Lista.cpp:226
226	    while (actualx != nullptr && !nuceloEncontrado && posicion < longitud) {
227	        if (pid == -1) {
233	            posicion++;
234	            actualx = actualx->siguiente; // si es el ultimo nodo, el siguiente es nullptr, y no se puede acceder a la propiedad nucleo
235	            if (actualx != nullptr && posicion < longitud){
226	    while (actualx != nullptr && !nuceloEncontrado && posicion < longitud) {
241	    if (!nuceloEncontrado) {
242	        posicion = 0;
245	    while (actual != nullptr && !nuceloEncontrado && posicion < longitud) {
246	        posicion++;
247	        int cargaActual = actual->nucleo.get_cola_procesos().get_longitud();
Nucleo::get_cola_procesos (this=0x6ef8f0) at Nucleo.cpp:155
155	    if (cola_procesos.es_vacia()){
Cola::es_vacia (this=0x6ef910) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Nucleo::get_cola_procesos (this=0x6ef8f0) at Nucleo.cpp:156
156	        cout << "Cola de procesos vacia" << endl;
157	        cout << endl;
158	        return cola_procesos;
162	}
Cola::get_longitud (this=0x5ff220) at Cola.cpp:134
134	    return longitud;
135	}
Cola::~Cola (this=0x5ff220, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Lista::nucleo_menos_carga (this=0x5ff5a0, imprimir=false) at Lista.cpp:248
248	        if (cargaActual < menorCarga) {
252	        actual = actual->siguiente;
245	    while (actual != nullptr && !nuceloEncontrado && posicion < longitud) {
256	    if (menorCarga > 2) {
261	    if (imprimir) {
266	    return posicionMenosCarga;
267	}
Lista::insertar_proceso (this=0x5ff5a0, proceso=..., posicion=0) at Lista.cpp:187
187	    NodoLista* nodo = obtener_nodo(posicion);
Lista::obtener_nodo (this=0x5ff5a0, posicion=0) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::insertar_proceso (this=0x5ff5a0, proceso=..., posicion=0) at Lista.cpp:188
188	    if (nodo != nullptr) {
189	        nodo->nucleo.add_proceso(proceso);
Nucleo::add_proceso (this=0x6e4230, proceso=...) at Nucleo.cpp:91
91	    if ((cola_procesos.es_vacia()) && (proceso_en_ejecucion.get_PID() == -1)){
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Proceso::get_PID (this=0x6e4234) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::add_proceso (this=0x6e4230, proceso=...) at Nucleo.cpp:94
94	    } else if (proceso_en_ejecucion.get_PID() != -1){
Proceso::get_PID (this=0x6e4234) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::add_proceso (this=0x6e4230, proceso=...) at Nucleo.cpp:95
95	        proceso.set_nucleo_asignado(id);
Proceso::set_nucleo_asignado (this=0x5ff250, nucleoAsignado=0) at Proceso.cpp:76
76	  this->nucleoAsignado = nucleoAsignado;
77	}
Nucleo::add_proceso (this=0x6e4230, proceso=...) at Nucleo.cpp:96
96	        cola_procesos.insertar_por_prioridad(proceso); 
Cola::insertar_por_prioridad (this=0x6e4250, proceso=...) at Cola.cpp:52
52	    encolar(proceso);
Cola::encolar (this=0x6e4250, proceso=...) at Cola.cpp:38
38	    NodoCola *nuevo_nodo = new NodoCola(proceso, proceso.get_prioridad());
Proceso::get_prioridad (this=0x5ff170) at Proceso.cpp:51
51	  return prioridad;
52	}
NodoCola::NodoCola (this=0x70d890, proceso=..., prioridad=3, sig=0x0) at NodoCola.cpp:23
23	NodoCola::NodoCola(Proceso proceso, int prioridad, NodoCola*sig){
Proceso::Proceso (this=0x70d898) at Proceso.cpp:12
12	  PID = -1;
13	  PPID = -1;
14	  inicio = -1;
15	  tiempoDeVida = -1;
16	  prioridad = -1;
17	  nucleoAsignado = -1;
18	}
NodoCola::NodoCola (this=0x70d890, proceso=..., prioridad=3, sig=0x0) at NodoCola.cpp:24
24	    this->proceso = proceso;
25	    this->siguiente = sig;
26	    this->prioridad = prioridad;
27	}
Proceso::~Proceso (this=0x5ff100, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::encolar (this=0x6e4250, proceso=...) at Cola.cpp:39
39	    if (es_vacia()){
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::encolar (this=0x6e4250, proceso=...) at Cola.cpp:40
40	        primero = nuevo_nodo;
41	        ultimo = nuevo_nodo;
47	    longitud++;
48	}
Proceso::~Proceso (this=0x5ff170, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::insertar_por_prioridad (this=0x6e4250, proceso=...) at Cola.cpp:53
53	    ordenar_por_prioridad();
Cola::ordenar_por_prioridad (this=0x6e4250) at Cola.cpp:211
211	    if (primero == nullptr || primero->siguiente == nullptr) {
213	        return;
237	}
Cola::insertar_por_prioridad (this=0x6e4250, proceso=...) at Cola.cpp:54
54	}
Proceso::~Proceso (this=0x5ff1f0, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Nucleo::add_proceso (this=0x6e4230, proceso=...) at Nucleo.cpp:99
99	}
Proceso::~Proceso (this=0x5ff250, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::insertar_proceso (this=0x5ff5a0, proceso=..., posicion=0) at Lista.cpp:193
193	}
Proceso::~Proceso (this=0x5ffb10, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:213
213	                            pila.desapilar();
Pila::desapilar (this=0x5ff5e0) at Pila.cpp:52
52	    if (cima != NULL) {
53	        pnodo aux = cima;
54	        cima = cima->siguiente;
55	        delete aux;
NodoPila::~NodoPila (this=0x70c7f0, __in_chrg=<optimized out>) at NodoPila.cpp:23
23	}
Proceso::~Proceso (this=0x70c7f0, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Pila::desapilar (this=0x5ff5e0) at Pila.cpp:57
57	}
main () at main2_test.cpp:214
214	                            if(!pila.esVacia()){
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
main () at main2_test.cpp:215
215	                                p = pila.mostrar();
Pila::mostrar (this=0x5ff5e0) at Pila.cpp:66
66	    if (esVacia()) {
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
Pila::mostrar (this=0x5ff5e0) at Pila.cpp:71
71	        return cima->proceso;
73	}
Proceso::~Proceso (this=0x5ffb30, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:211
211	                        while(p.get_inicio() == Global::tiempoTranscurrido){
Proceso::get_inicio (this=0x5ff300) at Proceso.cpp:43
43	  return inicio;
44	}
main () at main2_test.cpp:220
220	                    }
Proceso::~Proceso (this=0x5ff300, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
main () at main2_test.cpp:222
222	                    cout << endl;
223	                    lista.mostrar_estado_nucleos();
Lista::mostrar_estado_nucleos (this=0x5ff5a0) at Lista.cpp:140
140	    NodoLista* actual = primero;
141	    int pos = 0;
142	    while (actual != nullptr) {
143	        cout << "Nucleo en posicion " << pos << ":" << endl;
144	        actual->nucleo.detalles_nucleo();
Nucleo::detalles_nucleo (this=0x6e4230) at Nucleo.cpp:241
241	    if (proceso_en_ejecucion.get_PID() == -1){
Proceso::get_PID (this=0x6e4234) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::detalles_nucleo (this=0x6e4230) at Nucleo.cpp:244
244	        detalles_proceso();
Nucleo::detalles_proceso (this=0x6e4230) at Nucleo.cpp:202
202	    if (proceso_en_ejecucion.get_PID() == -1){
Proceso::get_PID (this=0x6e4234) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::detalles_proceso (this=0x6e4230) at Nucleo.cpp:205
205	        cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Proceso en nucleo " << id << " PID: " << proceso_en_ejecucion.get_PID() << ", PPID: " << proceso_en_ejecucion.get_PPID() << ", Inicio: " << proceso_en_ejecucion.get_inicio() << ", Tiempo de vida: " << proceso_en_ejecucion.get_tiempo_de_vida() << ", Prioridad: " << proceso_en_ejecucion.get_prioridad() << endl;
Proceso::get_PID (this=0x6e4234) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::get_PPID (this=0x6e4234) at Proceso.cpp:39
39	  return PPID;
40	}
Proceso::get_inicio (this=0x6e4234) at Proceso.cpp:43
43	  return inicio;
44	}
Proceso::get_tiempo_de_vida (this=0x6e4234) at Proceso.cpp:47
47	  return tiempoDeVida;
48	}
Proceso::get_prioridad (this=0x6e4234) at Proceso.cpp:51
51	  return prioridad;
52	}
Nucleo::detalles_proceso (this=0x6e4230) at Nucleo.cpp:207
207	}
Nucleo::detalles_nucleo (this=0x6e4230) at Nucleo.cpp:246
246	    cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Tiempo de inicio ejecucion: " << tiempo_inicio << ", Tiempo de finalizacion: " << tiempo_fin << endl;
247	    cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Tiempo de ejecucion restante: " << tiempo_fin-Global::tiempoTranscurrido << " minutos" << endl;
248	    if (cola_procesos.es_vacia()){
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Nucleo::detalles_nucleo (this=0x6e4230) at Nucleo.cpp:251
251	        cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Cola de procesos: " << endl;
252	        cola_procesos.mostrarCola();
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:143
143	    cout << "|PID|PPID|Inicio|Tiempo vida|Prioridad|Nucleo|" << endl;
144	    if (es_vacia()) {
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:149
149	    Cola tempCola;
Cola::Cola (this=0x5ff180) at Cola.cpp:13
13	    primero = NULL;
14	    ultimo = NULL;
15	    longitud = 0;
16	}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:150
150	    Proceso procesoActual;
Proceso::Proceso (this=0x5ff160) at Proceso.cpp:12
12	  PID = -1;
13	  PPID = -1;
14	  inicio = -1;
15	  tiempoDeVida = -1;
16	  prioridad = -1;
17	  nucleoAsignado = -1;
18	}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:152
152	    while (!es_vacia()) {
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:153
153	        procesoActual = desencolar();
Cola::desencolar (this=0x6e4250) at Cola.cpp:62
62	    if (!es_vacia()){
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::desencolar (this=0x6e4250) at Cola.cpp:63
63	        Proceso proceso = primero->proceso;
64	        NodoCola *aux = primero;
66	        if ((primero == ultimo) && (primero -> siguiente == NULL)){
67	            primero = NULL;
68	            ultimo = NULL;
69	            aux -> siguiente = NULL;
70	            delete(aux);
NodoCola::~NodoCola (this=0x70d890, __in_chrg=<optimized out>) at NodoCola.cpp:36
36	}
Proceso::~Proceso (this=0x70d898, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::desencolar (this=0x6e4250) at Cola.cpp:78
78	        longitud--;
79	        return proceso;
80	    } else {
Proceso::~Proceso (this=0x5ff100, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::desencolar (this=0x6e4250) at Cola.cpp:83
83	}
Proceso::~Proceso (this=0x5ff1a0, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:154
154	        cout << "| " << procesoActual.get_PID() << " | " << procesoActual.get_PPID() << " | " << procesoActual.get_inicio() << " | " << procesoActual.get_tiempo_de_vida() << " | " << procesoActual.get_prioridad() << " | " << procesoActual.get_nucleo_asignado() << " |" << endl;
Proceso::get_PID (this=0x5ff160) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::get_PPID (this=0x5ff160) at Proceso.cpp:39
39	  return PPID;
40	}
Proceso::get_inicio (this=0x5ff160) at Proceso.cpp:43
43	  return inicio;
44	}
Proceso::get_tiempo_de_vida (this=0x5ff160) at Proceso.cpp:47
47	  return tiempoDeVida;
48	}
Proceso::get_prioridad (this=0x5ff160) at Proceso.cpp:51
51	  return prioridad;
52	}
Proceso::get_nucleo_asignado (this=0x5ff160) at Proceso.cpp:55
55	  return nucleoAsignado;
56	}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:155
155	        tempCola.encolar(procesoActual);
Cola::encolar (this=0x5ff180, proceso=...) at Cola.cpp:38
38	    NodoCola *nuevo_nodo = new NodoCola(proceso, proceso.get_prioridad());
Proceso::get_prioridad (this=0x5ff1c0) at Proceso.cpp:51
51	  return prioridad;
52	}
NodoCola::NodoCola (this=0x70d890, proceso=..., prioridad=3, sig=0x0) at NodoCola.cpp:23
23	NodoCola::NodoCola(Proceso proceso, int prioridad, NodoCola*sig){
Proceso::Proceso (this=0x70d898) at Proceso.cpp:12
12	  PID = -1;
13	  PPID = -1;
14	  inicio = -1;
15	  tiempoDeVida = -1;
16	  prioridad = -1;
17	  nucleoAsignado = -1;
18	}
NodoCola::NodoCola (this=0x70d890, proceso=..., prioridad=3, sig=0x0) at NodoCola.cpp:24
24	    this->proceso = proceso;
25	    this->siguiente = sig;
26	    this->prioridad = prioridad;
27	}
Proceso::~Proceso (this=0x5ff0f0, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::encolar (this=0x5ff180, proceso=...) at Cola.cpp:39
39	    if (es_vacia()){
Cola::es_vacia (this=0x5ff180) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::encolar (this=0x5ff180, proceso=...) at Cola.cpp:40
40	        primero = nuevo_nodo;
41	        ultimo = nuevo_nodo;
47	    longitud++;
48	}
Proceso::~Proceso (this=0x5ff1c0, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:152
152	    while (!es_vacia()) {
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:157
157	    cout << endl;
160	    while (!tempCola.es_vacia()) {
Cola::es_vacia (this=0x5ff180) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:161
161	        encolar(tempCola.desencolar());
Cola::desencolar (this=0x5ff180) at Cola.cpp:62
62	    if (!es_vacia()){
Cola::es_vacia (this=0x5ff180) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::desencolar (this=0x5ff180) at Cola.cpp:63
63	        Proceso proceso = primero->proceso;
64	        NodoCola *aux = primero;
66	        if ((primero == ultimo) && (primero -> siguiente == NULL)){
67	            primero = NULL;
68	            ultimo = NULL;
69	            aux -> siguiente = NULL;
70	            delete(aux);
NodoCola::~NodoCola (this=0x70d890, __in_chrg=<optimized out>) at NodoCola.cpp:36
36	}
Proceso::~Proceso (this=0x70d898, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::desencolar (this=0x5ff180) at Cola.cpp:78
78	        longitud--;
79	        return proceso;
80	    } else {
Proceso::~Proceso (this=0x5ff100, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::desencolar (this=0x5ff180) at Cola.cpp:83
83	}
Cola::encolar (this=0x6e4250, proceso=...) at Cola.cpp:38
38	    NodoCola *nuevo_nodo = new NodoCola(proceso, proceso.get_prioridad());
Proceso::get_prioridad (this=0x5ff1e0) at Proceso.cpp:51
51	  return prioridad;
52	}
NodoCola::NodoCola (this=0x70d890, proceso=..., prioridad=3, sig=0x0) at NodoCola.cpp:23
23	NodoCola::NodoCola(Proceso proceso, int prioridad, NodoCola*sig){
Proceso::Proceso (this=0x70d898) at Proceso.cpp:12
12	  PID = -1;
13	  PPID = -1;
14	  inicio = -1;
15	  tiempoDeVida = -1;
16	  prioridad = -1;
17	  nucleoAsignado = -1;
18	}
NodoCola::NodoCola (this=0x70d890, proceso=..., prioridad=3, sig=0x0) at NodoCola.cpp:24
24	    this->proceso = proceso;
25	    this->siguiente = sig;
26	    this->prioridad = prioridad;
27	}
Proceso::~Proceso (this=0x5ff0f0, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::encolar (this=0x6e4250, proceso=...) at Cola.cpp:39
39	    if (es_vacia()){
Cola::es_vacia (this=0x6e4250) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::encolar (this=0x6e4250, proceso=...) at Cola.cpp:40
40	        primero = nuevo_nodo;
41	        ultimo = nuevo_nodo;
47	    longitud++;
48	}
Proceso::~Proceso (this=0x5ff1e0, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:160
160	    while (!tempCola.es_vacia()) {
Cola::es_vacia (this=0x5ff180) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Cola::mostrarCola (this=0x6e4250) at Cola.cpp:163
163	}
Proceso::~Proceso (this=0x5ff160, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::~Cola (this=0x5ff180, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Nucleo::detalles_nucleo (this=0x6e4230) at Nucleo.cpp:254
254	}
Lista::mostrar_estado_nucleos (this=0x5ff5a0) at Lista.cpp:145
145	        cout << endl;
146	        actual = actual->siguiente;
147	        pos++;
142	    while (actual != nullptr) {
143	        cout << "Nucleo en posicion " << pos << ":" << endl;
144	        actual->nucleo.detalles_nucleo();
Nucleo::detalles_nucleo (this=0x6ef8f0) at Nucleo.cpp:241
241	    if (proceso_en_ejecucion.get_PID() == -1){
Proceso::get_PID (this=0x6ef8f4) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::detalles_nucleo (this=0x6ef8f0) at Nucleo.cpp:244
244	        detalles_proceso();
Nucleo::detalles_proceso (this=0x6ef8f0) at Nucleo.cpp:202
202	    if (proceso_en_ejecucion.get_PID() == -1){
Proceso::get_PID (this=0x6ef8f4) at Proceso.cpp:35
35	  return PID;
36	}
Nucleo::detalles_proceso (this=0x6ef8f0) at Nucleo.cpp:205
205	        cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Proceso en nucleo " << id << " PID: " << proceso_en_ejecucion.get_PID() << ", PPID: " << proceso_en_ejecucion.get_PPID() << ", Inicio: " << proceso_en_ejecucion.get_inicio() << ", Tiempo de vida: " << proceso_en_ejecucion.get_tiempo_de_vida() << ", Prioridad: " << proceso_en_ejecucion.get_prioridad() << endl;
Proceso::get_PID (this=0x6ef8f4) at Proceso.cpp:35
35	  return PID;
36	}
Proceso::get_PPID (this=0x6ef8f4) at Proceso.cpp:39
39	  return PPID;
40	}
Proceso::get_inicio (this=0x6ef8f4) at Proceso.cpp:43
43	  return inicio;
44	}
Proceso::get_tiempo_de_vida (this=0x6ef8f4) at Proceso.cpp:47
47	  return tiempoDeVida;
48	}
Proceso::get_prioridad (this=0x6ef8f4) at Proceso.cpp:51
51	  return prioridad;
52	}
Nucleo::detalles_proceso (this=0x6ef8f0) at Nucleo.cpp:207
207	}
Nucleo::detalles_nucleo (this=0x6ef8f0) at Nucleo.cpp:246
246	    cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Tiempo de inicio ejecucion: " << tiempo_inicio << ", Tiempo de finalizacion: " << tiempo_fin << endl;
247	    cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Tiempo de ejecucion restante: " << tiempo_fin-Global::tiempoTranscurrido << " minutos" << endl;
248	    if (cola_procesos.es_vacia()){
Cola::es_vacia (this=0x6ef910) at Cola.cpp:124
124	    return ((primero == NULL) && (ultimo == NULL));
125	}
Nucleo::detalles_nucleo (this=0x6ef8f0) at Nucleo.cpp:249
249	        cout << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << " | " << "Cola de procesos vacia" << endl;
254	}
Lista::mostrar_estado_nucleos (this=0x5ff5a0) at Lista.cpp:145
145	        cout << endl;
146	        actual = actual->siguiente;
147	        pos++;
142	    while (actual != nullptr) {
149	}
main () at main2_test.cpp:224
224	                    cout << endl;
225	                    cout << endl;
148	                for(int i = Global::tiempoTranscurrido; Global::tiempoTranscurrido <= i+n; Global::tiempoTranscurrido++){
150	                    if (pila.esVacia() && lista.get_longitud() == 1 && lista.coger(0).get_proceso().get_PID() == -1 && lista.coger(0).get_cola_procesos().es_vacia()){
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
main () at main2_test.cpp:160
160	                    cout << endl;
161	                    cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
162	                    cout << "Tiempo actual: " << (Global::tiempoTranscurrido/60 < 10 ? "0" : "") << Global::tiempoTranscurrido/60 << ":" << (Global::tiempoTranscurrido%60 < 10 ? "0" : "") << Global::tiempoTranscurrido%60 << endl;
163	                    cout << endl;
166	                    if(!pila.esVacia() && Global::tiempoTranscurrido == 0){ 
Pila::esVacia (this=0x5ff5e0) at Pila.cpp:31
31	    return cima == NULL;
32	}
main () at main2_test.cpp:186
186	                    cout << endl;
187	                    cout << "Inicio de eliminacion de procesos que han terminado." << endl;
188	                    for (int i = 0; i < lista.get_longitud(); i++){
Lista::get_longitud (this=0x5ff5a0) at Lista.cpp:106
106	    return longitud;
107	}
main () at main2_test.cpp:189
189	                        cout << "6" << i << endl;
190	                        if (lista.coger(i).get_proceso().get_PID() != -1 && lista.coger(i).get_tiempo_fin() == Global::tiempoTranscurrido){ // aqui falla la ejecucion, PROBLEMAS creo en coger()

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=0) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 7272688}, tiempo_inicio = 0, tiempo_fin = 1}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = -838165247, proceso_en_ejecucion = {PID = 32765, PPID = -838160096, inicio = 32765, tiempoDeVida = 6287968, prioridad = 0, nucleoAsignado = -838873816}, cola_procesos = {primero = 0x7ffe4c61f4e8, ultimo = 0x7ffdce097a1f, longitud = 7272688}, tiempo_inicio = 0, tiempo_fin = 1}
305	        return nucleoaux;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x70d890, ultimo = 0x70d890, longitud = 1}, tiempo_inicio = 0, tiempo_fin = 4}
306	    } else {
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x70d890, ultimo = 0x70d890, longitud = 1}, tiempo_inicio = 0, tiempo_fin = 4}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
25	        NodoCola* aux = primero;
26	        primero = primero->siguiente;
27	        delete aux;
NodoCola::~NodoCola (this=0x70d890, __in_chrg=<optimized out>) at NodoCola.cpp:36
36	}
Proceso::~Proceso (this=0x70d898, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
29	}
Proceso::~Proceso (this=0x5ff224, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:310
310	}
Nucleo::get_proceso (this=0x5ff990) at Nucleo.cpp:141
141	        return proceso_en_ejecucion;
142	}
Proceso::get_PID (this=0x5ff970) at Proceso.cpp:35
35	  return PID;
36	}

Thread 1 hit Breakpoint 1, Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:298
298	    cout << "Cogiendo nucleo en posicion " << n << endl;
299	    NodoLista* nodo = obtener_nodo(n);
Lista::obtener_nodo (this=0x5ff5a0, posicion=0) at Lista.cpp:314
314	    if (posicion < 0 || posicion >= longitud) {
319	    NodoLista* actual = primero;
320	    for (int i = 0; i < posicion; ++i) {
323	    return actual; 
324	}
Lista::coger (this=0x5ff5a0, n=0) at Lista.cpp:301
301	    cout << "Nodo obtenido" << endl;
302	    if (nodo != nullptr) {
303	        cout << "Nodo no es nullptr" << endl;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x70d890, longitud = 1}, tiempo_inicio = 0, tiempo_fin = 4}
304	        Nucleo nucleoaux = nodo->nucleo;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x0, ultimo = 0x70d890, longitud = 1}, tiempo_inicio = 0, tiempo_fin = 4}
305	        return nucleoaux;
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x70d890, ultimo = 0x70d890, longitud = 1}, tiempo_inicio = 0, tiempo_fin = 4}
306	    } else {
1: nucleoaux = {id = 0, proceso_en_ejecucion = {PID = 1, PPID = 1, inicio = 0, tiempoDeVida = 4, prioridad = 0, nucleoAsignado = 0}, cola_procesos = {primero = 0x70d890, ultimo = 0x70d890, longitud = 1}, tiempo_inicio = 0, tiempo_fin = 4}
Nucleo::~Nucleo (this=0x5ff220, __in_chrg=<optimized out>) at Nucleo.cpp:47
47	Nucleo::~Nucleo() {}
Cola::~Cola (this=0x5ff240, __in_chrg=<optimized out>) at Cola.cpp:24
24	    while (primero) {
25	        NodoCola* aux = primero;
26	        primero = primero->siguiente;
27	        delete aux;
NodoCola::~NodoCola (this=0x70d890, __in_chrg=<optimized out>) at NodoCola.cpp:36
36	}
Proceso::~Proceso (this=0x70d898, __in_chrg=<optimized out>) at Proceso.cpp:31
31	Proceso::~Proceso() {}
warning: Critical error detected c0000374

Thread 1 received signal SIGTRAP, Trace/breakpoint trap.
0x00007ffe4ed0f353 in ntdll!RtlIsZeroMemory () from C:\Windows\SYSTEM32\ntdll.dll
Single stepping until exit from function ntdll!RtlIsZeroMemory,
which has no line number information.
0x00007ffe4ec620d0 in ntdll!RtlRaiseException () from C:\Windows\SYSTEM32\ntdll.dll
Single stepping until exit from function ntdll!RtlRaiseException,
which has no line number information.
gdb: unknown target exception 0xc0000374 at 0x7ffe4ed0f3c9

Thread 1 received signal ?, Unknown signal.
0x00007ffe4ed0f3c9 in ntdll!RtlIsZeroMemory () from C:\Windows\SYSTEM32\ntdll.dll
